

;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
; |                            Freeware version                             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 4935AC2ED73158BDD1F26ABB2C99F35F322B360D53391C0EAEEC451B5C99A232
; Input MD5    : 6C5B8AC51697775EE6D90BF14849BCCA
; Input CRC32  : 4FE5E4DC

; File Name   : /Users/jrodd/src/HOWARD/rexxsys/rexxsys.sys
; Format      : Binary file
; Base Address: 0000h Range: 0000h - 04A7h Loaded length: 04A7h

                .8086


; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Write/Execute
_TEXT           segment byte public 'DRIVER'
                assume cs:_TEXT
                assume es:nothing, ss:nothing, ds:nothing
                dd 0FFFFFFFFh
                dw 1000000000000000b    ; bit 15 1=character device
                dw offset strategy_routine
                dw offset interrupt_routine
                db '_       '
hdr_strategy    dw 0                    ; DATA XREF: strategy_routine↓w
                                        ; interrupt_routine↓r
hdr_interrupt   dw 0                    ; DATA XREF: strategy_routine+5↓w

; =============== S U B R O U T I N E =======================================


strategy_routine proc far               ; DATA XREF: _TEXT:0006↑o
                mov     cs:hdr_strategy, bx
                mov     cs:hdr_interrupt, es
                retf
strategy_routine endp

; ---------------------------------------------------------------------------
is_slash_or_colon_char db 0             ; DATA XREF: _TEXT:0096↓r
                                        ; _TEXT:00A6↓r
is_slash_char   db 0                    ; DATA XREF: _TEXT:009E↓r
set_to_42h      db 42h                  ; DATA XREF: sub_105:loc_51↓r
                                        ; _TEXT:00EC↓w ...
loaded_program_seg dw 0                 ; DATA XREF: _TEXT:0344↓r
                                        ; _TEXT:0354↓w
                db    0
                db    0
word_28         dw 0                    ; DATA XREF: _TEXT:loc_394↓r
                                        ; _TEXT:039C↓r ...
first_word      dw 0                    ; DATA XREF: _TEXT:0361↓w
                                        ; _TEXT:037D↓r
word_2C         dw 0                    ; DATA XREF: sub_105-A9↓r
                                        ; _TEXT:00CD↓w ...
rexx88pc_vector dd 0                    ; DATA XREF: _TEXT:00C1↓w
                                        ; sub_105+91↓r ...
psp_segment     dw 0                    ; DATA XREF: _TEXT:00C8↓w
                                        ; sub_1E0↓r
intxxh_caller_offset dw 0               ; DATA XREF: _TEXT:int7ch_proc_main↓w
                                        ; _TEXT:02E2↓r ...
intxxh_caller_segment dw 0              ; DATA XREF: _TEXT:02D7↓w
                                        ; _TEXT:02DD↓r ...
byte_38         db 0                    ; DATA XREF: _TEXT:00D5↓r
                                        ; _TEXT:00E5↓w ...
byte_39         db 0                    ; DATA XREF: _TEXT:00AE↓r
                                        ; sub_105+1E↓w ...
unk_3A          db  42h ; B             ; DATA XREF: sub_1E0+19↓o
                db    0
                db  47h ; G
                db    0
                db  4Bh ; K
                db    0
                db    1
                db    0
aRexx           db 'REXX',0
aDos            db 'DOS',0
aBat            db 'BAT',0
a0              db '0',0
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_105

loc_51:                                 ; CODE XREF: sub_105:loc_102↓j
                cmp     cs:set_to_42h, 43h ; 'C'
                jnz     short loc_71    ; Place call to original Int 21h
                push    ax
                mov     ax, ds
                cmp     ax, cs:word_2C
                jz      short loc_6B
                pop     ax
                pushf
                call    dword ptr cs:int21h_offset
                retn
; ---------------------------------------------------------------------------

loc_6B:                                 ; CODE XREF: sub_105-A4↑j
                pop     ax
; END OF FUNCTION CHUNK FOR sub_105
; ---------------------------------------------------------------------------
int1bh_vector   dd 0F80063B8h           ; CODE XREF: _TEXT:00F2↓j
                                        ; DATA XREF: device_command_init+F↓r ...

; =============== S U B R O U T I N E =======================================


int21h_return_error proc near           ; CODE XREF: sub_105-8E↓j
                retn
int21h_return_error endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_105

loc_71:                                 ; CODE XREF: sub_105-AE↑j
                pushf                   ; Place call to original Int 21h
                call    dword ptr cs:int21h_offset
                jb      short int21h_return_error
                call    pusha_proc
                push    cs
                pop     ds

loc_7E:                                 ; DATA XREF: sub_1E0+5↓r
                mov     dx, 21h ; '!'
                mov     cx, 2
; END OF FUNCTION CHUNK FOR sub_105
; ---------------------------------------------------------------------------
int21h_vector   dd 3FB4D88Bh            ; DATA XREF: device_command_init+20↓r
                                        ; device_command_init+60↓w ...
; ---------------------------------------------------------------------------
                pushf
                call    dword ptr cs:int21h_offset
                mov     ah, 3Eh ; '>'
                pushf
                call    dword ptr cs:int21h_offset
                cmp     cs:is_slash_or_colon_char, 2Fh ; '/'
                jz      short loc_B6
                cmp     cs:is_slash_char, 2Fh ; '/'
                jnz     short loc_F5
                cmp     cs:is_slash_or_colon_char, 3Ah ; ':'
                jnz     short loc_F5
                cmp     cs:byte_39, 0
                jz      short loc_F5

loc_B6:                                 ; CODE XREF: _TEXT:009C↑j
                call    popa_proc
                call    pusha_proc
                mov     word ptr cs:rexx88pc_vector+2, cs
                mov     word ptr cs:rexx88pc_vector, offset unk_222
                mov     cs:psp_segment, es
                mov     cs:word_2C, ds
                call    sub_1E0         ; Load PSP segment
                cmp     cs:byte_38, 0
                jnz     short loc_E9
                mov     ah, 30h ; '0'   ; Int 21h Func 30h
                pushf
                call    dword ptr cs:int21h_offset
                mov     cs:byte_38, al

loc_E9:                                 ; CODE XREF: _TEXT:00DB↑j
                call    popa_proc
                mov     cs:set_to_42h, 43h ; 'C'
                jmp     near ptr int1bh_vector
; ---------------------------------------------------------------------------

loc_F5:                                 ; CODE XREF: _TEXT:00A4↑j
                                        ; _TEXT:00AC↑j ...
                call    popa_proc
                mov     ax, 3D00h       ; Int 21h Func 3Dh, AL=0
                pushf
                call    dword ptr cs:int21h_offset
                retn
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_105

loc_102:                                ; CODE XREF: sub_105+3↓j
                jmp     loc_51
; END OF FUNCTION CHUNK FOR sub_105

; =============== S U B R O U T I N E =======================================


sub_105         proc near               ; CODE XREF: _TEXT:02E7↓p

; FUNCTION CHUNK AT 0051 SIZE 0000001B BYTES
; FUNCTION CHUNK AT 0071 SIZE 00000013 BYTES
; FUNCTION CHUNK AT 0102 SIZE 00000003 BYTES

                cmp     ah, 3Dh ; '='
                jz      short loc_102
                cmp     ah, 3Fh ; '?'
                jz      short loc_185
                cmp     ah, 42h ; 'B'
                jz      short chain_if_42h
                cmp     ah, 3Eh ; '>'
                jz      short chain_if_42h_0
                cmp     ax, 8
                jnz     short loc_13A
                cmp     bx, 1
                jnz     short loc_12C
                mov     cs:byte_39, 1
                jmp     short return_success ; Set CY=0 to show no error
; ---------------------------------------------------------------------------
                db  90h
; ---------------------------------------------------------------------------

loc_12C:                                ; CODE XREF: sub_105+1C↑j
                cmp     bx, 2
                jnz     short loc_13A
                mov     cs:byte_39, 0
                jmp     short return_success ; Set CY=0 to show no error
; ---------------------------------------------------------------------------
                db  90h
; ---------------------------------------------------------------------------

loc_13A:                                ; CODE XREF: sub_105+17↑j
                                        ; sub_105+2A↑j
                cmp     ax, 5
                jnz     short loc_147
                mov     si, 0
                mov     ds, si
                jmp     short return_error ; ; Set CY=1 and AX=-1 to return an error
; ---------------------------------------------------------------------------
                db  90h
; ---------------------------------------------------------------------------

loc_147:                                ; CODE XREF: sub_105+38↑j
                cmp     ax, 7
                jnz     short return_error ; ; Set CY=1 and AX=-1 to return an error
                mov     si, 4Fh ; 'O'
                mov     ax, cs
                mov     ds, ax
                jmp     short return_error ; ; Set CY=1 and AX=-1 to return an error
; ---------------------------------------------------------------------------
                nop

return_success:                         ; CODE XREF: sub_105+24↑j
                                        ; sub_105+32↑j
                clc                     ; Set CY=0 to show no error
                retn
; ---------------------------------------------------------------------------

return_error:                           ; CODE XREF: sub_105+3F↑j
                                        ; sub_105+45↑j ...
                mov     ax, 0FFFFh      ; ; Set CY=1 and AX=-1 to return an error
                stc
                retn
; ---------------------------------------------------------------------------

chain_if_42h:                           ; CODE XREF: sub_105+D↑j
                cmp     cs:set_to_42h, 43h ; 'C'
                jz      short return_success_0
                pushf
                call    dword ptr cs:int21h_offset
                retn
; ---------------------------------------------------------------------------

return_success_0:                       ; CODE XREF: sub_105+5E↑j
                mov     ax, 0
                clc
                retn
; ---------------------------------------------------------------------------

chain_if_42h_0:                         ; CODE XREF: sub_105+12↑j
                cmp     cs:set_to_42h, 43h ; 'C'
                jz      short return_success_0_0
                pushf
                call    dword ptr cs:int21h_offset
                retn
; ---------------------------------------------------------------------------

return_success_0_0:                     ; CODE XREF: sub_105+72↑j
                mov     ax, 0
                clc
                retn
; ---------------------------------------------------------------------------

loc_185:                                ; CODE XREF: sub_105+8↑j
                cmp     cs:set_to_42h, 43h ; 'C'
                jz      short loc_194
                pushf
                call    dword ptr cs:int21h_offset
                retn
; ---------------------------------------------------------------------------

loc_194:                                ; CODE XREF: sub_105+86↑j
                push    es
                push    bx
                les     bx, cs:rexx88pc_vector
                mov     al, es:[bx]
                inc     word ptr cs:rexx88pc_vector
                cmp     al, 0
                jnz     short loc_1CB
                call    check_is_rexx88pc_installed
                les     bx, cs:rexx88pc_vector
                mov     al, es:[bx]
                cmp     cs:byte_38, 2
                jnz     short loc_1C2
                inc     word ptr cs:rexx88pc_vector
                jmp     short loc_1CB
; ---------------------------------------------------------------------------
                nop

loc_1C2:                                ; CODE XREF: sub_105+B3↑j
                cmp     al, 40h ; '@'
                jnz     short loc_1CB
                inc     word ptr cs:rexx88pc_vector

loc_1CB:                                ; CODE XREF: sub_105+A0↑j
                                        ; sub_105+BA↑j ...
                cmp     al, 1Ah
                jnz     short loc_1D5
                mov     cs:set_to_42h, 42h ; 'B'

loc_1D5:                                ; CODE XREF: sub_105+C8↑j
                mov     bx, dx
                mov     [bx], al
                mov     ax, 1
                clc
                pop     bx
                pop     es
                retn
sub_105         endp


; =============== S U B R O U T I N E =======================================

; Load PSP segment

sub_1E0         proc near               ; CODE XREF: _TEXT:00D2↑p
                mov     es, cs:psp_segment
                mov     bl, byte ptr es:loc_7E+2 ; Get command line arguments length
                sub     bh, bh

loc_1EC:                                ; DATA XREF: sub_1E0+21↓r
                                        ; check_is_rexx88pc_installed+6↓r ...
                mov     byte ptr es:[bx+81h], 0 ; Null-terminate command line arguments

loc_1F2:                                ; DATA XREF: device_command_init+5B↓w
                mov     cx, bx          ; CX is now length of PSP up to end of arguments

loc_1F4:                                ; Point BX to command line arguments
                mov     bx, 81h
                mov     si, dx
                mov     di, offset unk_3A
                push    cs              ; DX:BX = loc_81 / DX:SI = unk_3A
                pop     dx
                mov     ax, 0
                int     7Ch             ; IBM REXX88PC command language
                retn
sub_1E0         endp

; ---------------------------------------------------------------------------
zero_for_ivt_seg dw 0                   ; DATA XREF: check_is_rexx88pc_installed+1↓r
aRexxIsnTInstal db 0Dh,0Ah              ; DATA XREF: check_is_rexx88pc_installed+28↓o
                db 'REXX isn',27h,'t installed',0Dh,0Ah,'$'
rexx_not_installed_flag dw 1A1Ah        ; DATA XREF: check_is_rexx88pc_installed+38↓o
                db    0
unk_222         db    0                 ; DATA XREF: _TEXT:00C1↑o

; =============== S U B R O U T I N E =======================================


check_is_rexx88pc_installed proc near   ; CODE XREF: sub_105+A2↑p
                push    ds
                mov     ds, cs:zero_for_ivt_seg
                cmp     word ptr ds:loc_1EC+4, offset int7ch_proc ; Null-terminate command line arguments
                pop     ds
                jz      short loc_248
                call    pusha_proc      ; Preserve registers
                mov     ax, 1           ; REXX88PC Func 01h
                int     7Ch             ; IBM REXX88PC command language
                mov     word ptr cs:rexx88pc_vector+2, ds ; Store DS:DX result
                mov     word ptr cs:rexx88pc_vector, dx
                call    popa_proc       ; Restore registers
                retn
; ---------------------------------------------------------------------------

loc_248:                                ; CODE XREF: check_is_rexx88pc_installed+D↑j
                push    ax
                push    dx
                push    ds
                mov     dx, offset aRexxIsnTInstal ; "\r\nREXX isn't installed\r\n$"
                push    cs
                pop     ds
                mov     ah, 9           ; Int 21h Func 9 = Print string
                pushf
                call    dword ptr cs:int21h_offset
                pop     ds
                pop     dx
                pop     ax
                mov     word ptr cs:rexx88pc_vector, offset rexx_not_installed_flag
                mov     word ptr cs:rexx88pc_vector+2, cs
                retn
check_is_rexx88pc_installed endp

; ---------------------------------------------------------------------------
pusha_popa_caller dw 0                  ; DATA XREF: pusha_proc↓w
                                        ; pusha_proc+F↓r ...

; =============== S U B R O U T I N E =======================================


pusha_proc      proc near               ; CODE XREF: sub_105-8C↑p
                                        ; _TEXT:00B9↑p ...
                pop     cs:pusha_popa_caller
                pushf
                push    ax
                push    bx
                push    cx
                push    dx
                push    si
                push    di
                push    bp
                push    ds
                push    es
                push    cs:pusha_popa_caller
                retn
pusha_proc      endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


popa_proc       proc near               ; CODE XREF: _TEXT:loc_B6↑p
                                        ; _TEXT:loc_E9↑p ...
                pop     cs:pusha_popa_caller
                pop     es
                pop     ds
                pop     bp
                pop     di
                pop     si
                pop     dx
                pop     cx
                pop     bx
                pop     ax
                popf
                push    cs:pusha_popa_caller
                retn
popa_proc       endp ; sp-analysis failed

; ---------------------------------------------------------------------------
                jmp     short int1bh_proc
; ---------------------------------------------------------------------------
int1bh_offset   dw 0                    ; DATA XREF: _TEXT:02BA↓r
                                        ; device_command_init+14↓w
int1bh_segment  dw 0                    ; DATA XREF: device_command_init+19↓w
                db  4Bh ; K
                db  42h ; B
                db    0
                db 0EBh
                db    7
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0CBh
; ---------------------------------------------------------------------------

int1bh_proc:                            ; CODE XREF: _TEXT:0294↑j
                                        ; DATA XREF: device_command_init+48↓o
                mov     cs:set_to_42h, 42h ; 'B'
                push    ax
                push    bx
                mov     ax, 8
                mov     bx, 0
                int     7Ch             ; IBM REXX88PC command language
                pop     bx
                pop     ax
                clc
                jmp     dword ptr cs:int1bh_offset
; ---------------------------------------------------------------------------

int7ch_proc:                            ; DATA XREF: check_is_rexx88pc_installed+6↑o
                                        ; device_command_init+54↓o
                jmp     short int7ch_proc_main
; ---------------------------------------------------------------------------
int7ch_offset   dw 0                    ; DATA XREF: device_command_init+36↓w
int7ch_segment  dw 0                    ; DATA XREF: device_command_init+3B↓w
                db 4Bh
                db 42h
init_to_80h     db    0                 ; DATA XREF: device_command_init+40↓w
; ---------------------------------------------------------------------------
                jmp     short locret_2D1
; ---------------------------------------------------------------------------
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
; ---------------------------------------------------------------------------

locret_2D1:                             ; CODE XREF: _TEXT:02C8↑j
                retf
; ---------------------------------------------------------------------------

int7ch_proc_main:                       ; CODE XREF: _TEXT:int7ch_proc↑j
                                        ; _TEXT:03FA↓j
                pop     cs:intxxh_caller_offset
                pop     cs:intxxh_caller_segment
                popf
                push    cs:intxxh_caller_segment
                push    cs:intxxh_caller_offset
                call    sub_105
                retf
; ---------------------------------------------------------------------------
                jmp     short int21h_proc
; ---------------------------------------------------------------------------
int21h_offset   dw 0                    ; DATA XREF: sub_105-A0↑r
                                        ; sub_105-93↑r ...
int21h_segment  dw 0                    ; DATA XREF: device_command_init+2A↓w
                db 4Bh
                db 42h
                db 0
; ---------------------------------------------------------------------------
                jmp     short locret_2FD
; ---------------------------------------------------------------------------
                dd 0
                dw 0
                db    0
; ---------------------------------------------------------------------------

locret_2FD:                             ; CODE XREF: _TEXT:02F4↑j
                retf
; ---------------------------------------------------------------------------

int21h_proc:                            ; CODE XREF: _TEXT:02EB↑j
                                        ; DATA XREF: device_command_init+60↓o
                pop     cs:intxxh_caller_offset
                pop     cs:intxxh_caller_segment
                push    cs:intxxh_caller_segment
                push    cs:intxxh_caller_offset
                cmp     ah, 3Dh ; '='   ; Int 21h Func 3Dh?
                jz      short int21h_func3dh
                jmp     int_21h_hook_other_than_3dh ; Go to handler for other traps than Func 3Dh
; ---------------------------------------------------------------------------

int21h_func3dh:                         ; CODE XREF: _TEXT:0315↑j
                push    bx
                push    ax
                mov     bx, dx

scan_to_end_of_string:                  ; CODE XREF: _TEXT:0325↓j
                mov     al, [bx]
                cmp     al, 0
                jz      short at_end_of_string ; Check file extension
                inc     bx
                jmp     short scan_to_end_of_string
; ---------------------------------------------------------------------------

at_end_of_string:                       ; CODE XREF: _TEXT:0322↑j
                sub     bx, 3           ; Check file extension
                mov     al, [bx]
                or      al, 20h
                cmp     al, 62h ; 'b'
                jnz     short is_not_bat_file
                inc     bx
                mov     al, [bx]
                or      al, 20h
                cmp     al, 61h ; 'a'
                jnz     short is_not_bat_file
                inc     bx
                mov     al, [bx]
                or      al, 20h
                cmp     al, 74h ; 't'
                jnz     short is_not_bat_file
                cmp     cs:loaded_program_seg, 0
                jnz     short loc_36C
                pushf
                mov     ah, 51h ; 'Q'   ; Call Int 21h Func 51h
                call    dword ptr cs:int21h_offset
                mov     cs:loaded_program_seg, bx ;  Store BX
                mov     es, bx          ; Inspect program we just loaded
                mov     bx, 100h
                mov     ax, es:[bx]     ; Obtain first character of program we just loaded
                mov     cs:first_word, ax
                push    es
                jmp     short check_bp  ; BP=0?
; ---------------------------------------------------------------------------
                nop

is_not_bat_file:                        ; CODE XREF: _TEXT:0330↑j
                                        ; _TEXT:0339↑j ...
                jmp     chain_int21h_ax_bx
; ---------------------------------------------------------------------------

loc_36C:                                ; CODE XREF: _TEXT:034A↑j
                push    es
                pushf
                mov     ah, 51h ; 'Q'
                call    dword ptr cs:int21h_offset
                mov     es, bx
                assume es:nothing
                mov     bx, 100h
                mov     ax, es:[bx]
                cmp     ax, cs:first_word
                jnz     short chain_int21h_es_ax_bx
                cmp     dx, 80h
                jnb     short chain_int21h_es_ax_bx
                cmp     bp, 0
                jz      short loc_394
                cmp     bp, 1
                jnz     short chain_int21h_es_ax_bx

loc_394:                                ; CODE XREF: _TEXT:038D↑j
                cmp     cs:word_28, 0
                jz      short check_bp  ; BP=0?
                mov     ax, cs:word_28
                cmp     ax, cs:intxxh_caller_offset
                jz      short chain_int7ch_es_ax_bx
                cmp     cs:set_to_42h, 43h ; 'C'
                jnz     short search_call_stack ; Call with PUSH BX,AX,ES; keep ES on top of stack
                mov     bx, ds
                cmp     bx, cs:word_2C
                jnz     short chain_int21h_es_ax_bx

search_call_stack:                      ; CODE XREF: _TEXT:03AD↑j
                pop     es              ; Call with PUSH BX,AX,ES; keep ES on top of stack
                assume es:nothing
                push    es
                push    cx              ; Preserve CX, ES:DI
                push    es
                push    di
                push    ax              ; Preserve AX
                mov     ax, ss          ; Copy SS:SP to ES:DI
                mov     es, ax
                mov     di, sp
                pop     ax              ; Restore AX
                mov     cx, 0FFFEh
                sub     cx, di          ; Set ES:DI+CX to reach to end of segment
                shr     cx, 1           ; Convert CX to # words instead of bytes
                cmp     cx, 100h        ; Don't scan more than 256 words (512 bytes)
                jle     short trunc_cx_to_100h ; Search next 512 bytes (256 words) of stack for AX
                mov     cx, 100h

trunc_cx_to_100h:                       ; CODE XREF: _TEXT:03D0↑j
                repne scasw             ; Search next 512 bytes (256 words) of stack for AX
                pop     di              ; Restore ES:DI, CX
                pop     es
                pop     cx
                jnz     short chain_int21h_es_ax_bx ; If AX not found in stack, chain to Int 21h
                jmp     short chain_int7ch_es_ax_bx ; If AX found in stack, chain to REXX88 Int 7Ch
; ---------------------------------------------------------------------------
                nop

check_bp:                               ; CODE XREF: _TEXT:0366↑j
                                        ; _TEXT:039A↑j
                cmp     bp, 0           ; BP=0?
                jz      short check_dx_80h ; Check for DX >= 80h next, then
                cmp     bp, 1           ; BP=1?
                jnz     short chain_int21h_es_ax_bx ; Pop ES,AX,BX and chain to Int 21h

check_dx_80h:                           ; CODE XREF: _TEXT:03E2↑j
                cmp     dx, 80h         ; DX >= 80h?
                jnb     short chain_int21h_es_ax_bx ; Pop ES,AX,BX and chain to Int 21h
                mov     ax, cs:intxxh_caller_offset ; Load the ultimate return address of our caller
                mov     cs:word_28, ax  ; Store that and then fall into int 7Ch handler

chain_int7ch_es_ax_bx:                  ; CODE XREF: _TEXT:03A5↑j
                                        ; _TEXT:03DC↑j ...
                pop     es
                pop     ax
                pop     bx
                jmp     int7ch_proc_main
; ---------------------------------------------------------------------------

chain_int21h_es_ax_bx:                  ; CODE XREF: _TEXT:0382↑j
                                        ; _TEXT:0388↑j ...
                pop     es

chain_int21h_ax_bx:                     ; CODE XREF: _TEXT:is_not_bat_file↑j
                pop     ax
                pop     bx

call_regular_int21h:                    ; CODE XREF: _TEXT:0414↓j
                                        ; _TEXT:0419↓j
                jmp     dword ptr cs:int21h_offset
; ---------------------------------------------------------------------------

int_21h_hook_other_than_3dh:            ; CODE XREF: _TEXT:0317↑j
                cmp     ah, 3Eh ; '>'   ; Trap Func 3Eh
                jz      short is_hooked_21h ; Don't trap if BX=63h
                cmp     ah, 3Fh ; '?'   ; Trap Func 3Fh
                jz      short is_hooked_21h ; Don't trap if BX=63h
                cmp     ah, 42h ; 'B'   ; Trap Func 42h
                jz      short is_hooked_21h ; Don't trap if BX=63h
                jmp     short call_regular_int21h
; ---------------------------------------------------------------------------

is_hooked_21h:                          ; CODE XREF: _TEXT:0408↑j
                                        ; _TEXT:040D↑j ...
                cmp     bx, 63h ; 'c'   ; Don't trap if BX=63h
                jnz     short call_regular_int21h
                push    bx
                push    ax
                push    es
                jmp     short chain_int7ch_es_ax_bx

; =============== S U B R O U T I N E =======================================


interrupt_routine proc far              ; DATA XREF: _TEXT:0008↑o
                les     bx, dword ptr cs:hdr_strategy
                or      word ptr es:[bx+3], 100h
                mov     al, es:[bx+2]
                test    al, al
                jz      short near ptr device_command_init ; Set end address of driver
                or      word ptr es:[bx+3], 8003h
                retf
interrupt_routine endp


; =============== S U B R O U T I N E =======================================

; Set end address of driver

device_command_init proc far            ; CODE XREF: interrupt_routine+11↑j
                mov     ax, end_of_program+1
                mov     es:[bx+0Eh], ax
                mov     word ptr es:[bx+10h], cs
                xor     ax, ax
                mov     es, ax
                les     bx, es:int1bh_vector ; Get Int 1Bh vector
                mov     cs:int1bh_offset, bx
                mov     cs:int1bh_segment, es
                mov     es, ax
                les     bx, es:int21h_vector ; Get Int 21h vector
                mov     cs:int21h_offset, bx
                mov     cs:int21h_segment, es
                mov     es, ax
                les     bx, dword ptr es:loc_1EC+4 ; Get Int 7Ch vector
                mov     cs:int7ch_offset, bx
                mov     cs:int7ch_segment, es
                mov     byte ptr cs:init_to_80h, 80h
                mov     es, ax
                mov     word ptr es:int1bh_vector, offset int1bh_proc
                mov     word ptr es:int1bh_vector+2, cs
                mov     word ptr es:loc_1EC+4, offset int7ch_proc ; Null-terminate command line arguments
                mov     word ptr es:loc_1F2, cs ; CX is now length of PSP up to end of arguments
                mov     word ptr es:int21h_vector, offset int21h_proc
                mov     word ptr es:int21h_vector+2, cs

end_of_program:                         ; DATA XREF: device_command_init↑t
                retf
device_command_init endp

_TEXT           ends


                end
